---
title: "Chapter 2 - Choosing Colors"
description: |
  Using (predefined) color palettes for setting colors.
author:
  - name: "Marcel Raab"
    url: http://marcelraab.de
    affiliation: University of Mannheim
    affiliation_url: https://www.uni-mannheim.de
  - name: "Emanuela Struffolino"
    url: https://www.wzb.eu/en/persons/emanuela-struffolino
    affiliation: WZB Berlin
    affiliation_url: https://www.wzb.eu
date: "`r Sys.Date()`"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
setwd("C:/Dropbox/01_Arbeit/02_Projekte/SA_book/05_datawork/04_r-scripts/Chapter_02")
load("Test.RData")
# use (and install if necessary) pacman package 
if (!require("pacman")) install.packages("pacman")
library(pacman)

# load and install (if necessary) required packages for this course
p_load(TraMineR, tidyverse, haven, knitr, kableExtra, 
       RColorBrewer, colorspace, colortools, icon)
```

The community of `r fa_r_project(colour = "#384CB7")` developers provides you with plenty of tools for finding suitable colors for sequence visualization. We illustrate how to use `RColorBrewer` (which is also used by `TraMiner::seqdef`), `colorspace`, and `colortools` to choose colors. If you are using R Studio you also might want to consider the very helpful package `colourpicker`.

For a brief introduction to the "Selecting Colors for Statistical Graphics" we recommend the paper by [Zeileis et al. (2009)](https://dx.doi.org/10.1016/j.csda.2008.11.033). For a more detailed discussion of color palettes based on the HCL (Hue-Chroma-Luminance) color space using R we refer to [Zeileis et al. (2019)](https://arxiv.org/abs/1903.06490).


For this excercise we want to find a suitable color palette for visualizing sequences with the following state space (alphabet):

```{r include=FALSE}
setwd("C:/Dropbox/01_Arbeit/02_Projekte/SA_book/05_datawork/04_r-scripts/Chapter_02")
source("Test.R")
```

```{r echo=FALSE}
kable(tibble(state = longlab, shortlabel = shortlab), 
      col.names = c("State", "Short Label")) %>%
  kable_styling(bootstrap_options = 
                  c("striped", "hover", "condensed"),
                full_width = F)
```


\  

## Defining the sequence color palette

The state space is a combination of partnership status and fertility. For each partnership state we assign a unique color.

- Single = Blue
- LAT = Green
- Cohabitation = Orange
- Marriage = Purple/Magenta

In order to indicate differences in fertility within partnership states we increase the chroma of the respective color.

\  

## Choosing colors with `RColorBrewer`

Typing `display.brewer.all()` provides you with an overview of the color palettes available in the `RColorBrewer` package.

```{r echo=FALSE, out.width = '80%', fig.align = "center"}
#display.brewer.all()
include_graphics("brewerpal.png")

```

Knowing the names of the palettes we want to use (`"Blues", "Greens", "Oranges", "Purples"`) we can continue by choosing specific colors from these palettes. Usually this is an iterative process which involves inspecting multiple palettes.

For example, `RColorBrewer` gives us different sets of Blues when we inspect sequential palettes of different length. It is up to you to decide which colors fit your purposes best and to extract them for your sequence color palette.

```{r, eval=FALSE, echo=TRUE}
display.brewer.pal(3, "Blues")
display.brewer.pal(7, "Blues")
```


```{r, echo=FALSE, fig.height = 1, fig.width = 7}
par(mar = c(1, 4, 0, 2) + 0.1)
display.brewer.pal(3, "Blues")
title(xlab="Blues (sequential, n = 3)", line=0)
display.brewer.pal(7, "Blues")
title(xlab="Blues (sequential, n = 7)", line=0)
```

## Continue testing

```{r}
# extract color palettes for the different partnership-fertility combinations
col1 <- brewer.pal(3, "Blues")[2:3]
col2 <- brewer.pal(3, "Greens")[2:3]
col3 <- brewer.pal(3, "Oranges")[2:3]
col4 <- brewer.pal(7, "Purples")[5:7]

# define complete color palette
colspace1 <- c(col1, col2, col3, col4)
```

The resulting color palette can be inspected using the `swatchplot` function of the `colorspace` package. The resulting color palette can be inspected using the `swatchplot` function of the `colorspace` package. The resulting color palette can be inspected using the `swatchplot` function of the `colorspace` package. The resulting color palette can be inspected using the `swatchplot` function of the `colorspace` package.

<aside>
```{r, echo=TRUE}
swatchplot(colspace1)
```
</aside>


## Next step

Distill is a publication format for scientific and technical writing, native to the web. 

Learn more about using Distill for R Markdown at <https://rstudio.github.io/distill>.





